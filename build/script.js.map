{"version":3,"file":"script.js","mappings":"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","sources":["webpack://wp-query-block-extension-metadata-filter/./src/components.js","webpack://wp-query-block-extension-metadata-filter/external window \"lodash\"","webpack://wp-query-block-extension-metadata-filter/external window [\"wp\",\"element\"]","webpack://wp-query-block-extension-metadata-filter/webpack/bootstrap","webpack://wp-query-block-extension-metadata-filter/webpack/runtime/compat get default export","webpack://wp-query-block-extension-metadata-filter/webpack/runtime/define property getters","webpack://wp-query-block-extension-metadata-filter/webpack/runtime/hasOwnProperty shorthand","webpack://wp-query-block-extension-metadata-filter/webpack/runtime/make namespace object","webpack://wp-query-block-extension-metadata-filter/./src/script.js"],"sourcesContent":["const { TextControl, SelectControl, Button } = wp.components;\nconst { Fragment } = wp.element;\n\nexport const MetaQueryControl = ( props ) => {\n    const { metaKey, metaValue, compare, type, setKey, setValue, setCompare, setType, onDelete, isLast, metaKeys } = props;\n\n    return (\n        <Fragment>\n            <SelectControl\n                label=\"Meta Key\"\n                value={ metaKey }\n                options={ metaKeys.map(key => {\n                    return {\n                        label: key,\n                        value: key\n                    };\n                }) }\n                onChange={ ( newKey ) => {\n                    setKey( newKey );\n                } }\n                __nextHasNoMarginBottom\n            />\n            <TextControl\n                label=\"Meta Value\"\n                value={ metaValue }\n                onChange={ ( value ) => {\n                    setValue( value );\n                } }\n            />\n            <SelectControl\n                label=\"Compare\"\n                value={ compare }\n                options={ [\n                    { label: 'Equal', value: '=' },\n                    { label: 'Not equal', value: '!=' },\n                    { label: 'Greater than', value: '>' },\n                    { label: 'Greater than or equal to', value: '>=' },\n                    { label: 'Less than', value: '<' },\n                    { label: 'Less than or equal to', value: '<=' }\n                ] }\n                onChange={ ( newCompare ) => {\n                    setCompare( newCompare );\n                }}\n                __nextHasNoMarginBottom\n            />\n            <SelectControl\n                label=\"Type\"\n                value={ type }\n                options={ [\n                    { label: 'Text', value: 'CHAR' },\n                    { label: 'Numeric', value: 'NUMERIC' },\n                    { label: 'Binary', value: 'BINARY' },\n                    { label: 'Date', value: 'DATE' },\n                    { label: 'Time', value: 'TIME' },\n                    { label: 'DateTime', value: 'DATETIME' },\n                    { label: 'Decimal', value: 'DECIMAL' },\n                    { label: 'Signed', value: 'SIGNED' },\n                    { label: 'Unsigned', value: 'UNSIGNED' }\n                ] }\n                onChange={ ( newType ) => {\n                    setType( newType );\n                } }\n            />\n            { isLast ? null : (\n                <Button\n                    onClick={() => {\n                        onDelete();\n                    }}\n                    variant=\"secondary\"\n                >\n                    <svg width=\"15\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path d=\"M135.2 17.7L128 32H32C14.3 32 0 46.3 0 64S14.3 96 32 96H416c17.7 0 32-14.3 32-32s-14.3-32-32-32H320l-7.2-14.3C307.4 6.8 296.3 0 284.2 0H163.8c-12.1 0-23.2 6.8-28.6 17.7zM416 128H32L53.2 467c1.6 25.3 22.6 45 47.9 45H346.9c25.3 0 46.3-19.7 47.9-45L416 128z\"/></svg>\n                </Button>\n            ) }\n        </Fragment>\n    );\n};","module.exports = window[\"lodash\"];","module.exports = window[\"wp\"][\"element\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const { createHigherOrderComponent } = wp.compose;\nconst { Fragment, useEffect, useState } = wp.element;\nconst { InspectorControls } = wp.blockEditor;\nconst { PanelBody, ToggleControl, PanelRow, SelectControl, Button, __experimentalHeading } = wp.components;\nconst Heading = __experimentalHeading;\nimport { MetaQueryControl } from './components';\nimport { cloneDeep } from 'lodash';\n\n/**\n * Add additional attributes to core/post-query block.\n */\nfunction addAdditionalAttribute( settings, name ) {\n    if ( 'core/query' !== name ) {\n        return settings;\n    }\n\n    return {\n        ...settings,\n        attributes: {\n            ...settings.attributes,\n            enableMetaFilter: {\n                type: 'boolean',\n                default: false\n            }\n        }\n    }\n}\n\nwp.hooks.addFilter(\n    'blocks.registerBlockType',\n    'query-block-extension/metadata/filter/add-attributes',\n    addAdditionalAttribute\n);\n\n/**\n * Add additional controls to core/post-template block.\n */\nconst withInspectorControls = createHigherOrderComponent( ( BlockEdit ) => {\n    return ( props ) => {\n        const { name, attributes, setAttributes } = props;\n        const { enableMetaFilter, query } = attributes;\n        const [ metaKeys, setMetaKeys ] = useState([]);\n\n        if( 'core/query' !== name ) {\n            return <BlockEdit { ...props } />;\n        }\n    \n        useEffect(() => {\n            const metaKeys = async() => {\n    \n                const data = new FormData();\n    \n                data.append( 'action', 'metadata_filter_get_meta_keys' );\n                data.append( 'nonce', wp_query_block_metadata_filter.nonce );\n            \n                const response = await fetch( ajaxurl, {\n                  method: \"POST\",\n                  credentials: 'same-origin',\n                  body: data\n                } );\n                const responseJson = await response.json();\n                \n                if( responseJson.success ) {\n                    setMetaKeys( responseJson.data );\n                }\n            };\n    \n            metaKeys();\n        }, []);\n\n        return (\n            <Fragment>\n                <BlockEdit { ...props } />\n                <InspectorControls>\n                    <PanelBody title=\"Metadata Filter\" initialOpen={ false }>\n                        { metaKeys.length > 0 ? (\n                            <Fragment>\n                                <PanelRow>\n                                    <ToggleControl\n                                        label=\"Enable Metadata Filter\"\n                                        checked={ enableMetaFilter }\n                                        onChange={ () => {\n                                            const { ['metaQuery']: remove, ...rest } = query;\n                                            setAttributes( {\n                                                enableMetaFilter: ! enableMetaFilter,\n                                                query: ! enableMetaFilter ? {\n                                                    ...query,\n                                                    metaQuery: {\n                                                        relation: 'AND',\n                                                        innerQueries: [\n                                                            {\n                                                                key: metaKeys[0],\n                                                                value: '',\n                                                                compare: '=',\n                                                                type: 'CHAR'\n                                                            }\n                                                        ]\n                                                    }\n                                                } : rest\n                                            });\n                                        } }\n                                    />\n                                </PanelRow>\n                                { enableMetaFilter ? (\n                                    <Fragment>\n                                        { 1 >= query.metaQuery.innerQueries.length ? null : (\n                                            <SelectControl\n                                                label=\"Inner Queries Relation\"\n                                                value={ query.metaQuery.relation }\n                                                options={ [\n                                                    { label: 'AND', value: 'AND' },\n                                                    { label: 'OR', value: 'OR' }\n                                                ] }\n                                                onChange={ ( newRelation ) => {\n                                                    setAttributes({\n                                                        query: {\n                                                            ...query,\n                                                            metaQuery: {\n                                                                ...query.metaQuery,\n                                                                relation: newRelation\n                                                            }\n                                                        }\n                                                    });\n                                                }}\n                                                __nextHasNoMarginBottom\n                                            />\n                                        ) }\n                                        <Heading>Inner Queries</Heading>\n                                        { query.metaQuery.innerQueries.map( ( innerQuery, index ) => {\n                                            return (\n                                                <Fragment>\n                                                    <hr />\n                                                    <MetaQueryControl\n                                                        metaKey={ innerQuery.key }\n                                                        metaValue={ innerQuery.value }\n                                                        compare={ innerQuery.compare }\n                                                        type={ innerQuery.type }\n                                                        setKey={ key => {\n                                                            let temp = cloneDeep(query.metaQuery.innerQueries);\n                                                            temp[index].key = key;\n\n                                                            setAttributes({\n                                                                query: {\n                                                                    ...query,\n                                                                    metaQuery: {\n                                                                        ...query.metaQuery,\n                                                                        innerQueries: temp\n                                                                    }\n                                                                }\n                                                            });\n                                                        }}\n                                                        setValue={ value => {\n                                                            let temp = cloneDeep(query.metaQuery.innerQueries);\n                                                            temp[index].value = value;\n                                                \n                                                            setAttributes({\n                                                                query: {\n                                                                    ...query,\n                                                                    metaQuery: {\n                                                                        ...query.metaQuery,\n                                                                        innerQueries: temp\n                                                                    }\n                                                                }\n                                                            });\n                                                        }}\n                                                        setType={ type => {\n                                                            let temp = cloneDeep(query.metaQuery.innerQueries);\n                                                            temp[index].type = type;\n                                                \n                                                            setAttributes({\n                                                                query: {\n                                                                    ...query,\n                                                                    metaQuery: {\n                                                                        ...query.metaQuery,\n                                                                        innerQueries: temp\n                                                                    }\n                                                                }\n                                                            });\n                                                        }}\n                                                        setCompare={ compare => {\n                                                            let temp = cloneDeep(query.metaQuery.innerQueries);\n                                                            temp[index].compare = compare;\n                                                \n                                                            setAttributes({\n                                                                query: {\n                                                                    ...query,\n                                                                    metaQuery: {\n                                                                        ...query.metaQuery,\n                                                                        innerQueries: temp\n                                                                    }\n                                                                }\n                                                            });\n                                                        }}\n                                                        isLast={ 1 >= query.metaQuery.innerQueries.length }\n                                                        onDelete={() => {\n                                                            setAttributes({\n                                                                query: {\n                                                                    ...query,\n                                                                    metaQuery: {\n                                                                        ...query.metaQuery,\n                                                                        innerQueries: query.metaQuery.innerQueries.filter( (q, qIndex) => {\n                                                                            return index !== qIndex;\n                                                                        })\n                                                                    }\n                                                                }\n                                                            });\n                                                        }}\n                                                        metaKeys={ metaKeys }\n                                                    />\n                                                </Fragment>\n                                            );\n                                        }) }\n                                        <hr />\n                                        <Button\n                                            variant=\"secondary\"\n                                            onClick={() => {\n                                                setAttributes({\n                                                    query: {\n                                                        ...query,\n                                                        metaQuery: {\n                                                            ...query.metaQuery,\n                                                            innerQueries: [\n                                                                ...query.metaQuery.innerQueries,\n                                                                {\n                                                                    key: metaKeys[0],\n                                                                    value: '',\n                                                                    compare: '=',\n                                                                    type: 'CHAR'\n                                                                }\n                                                            ]\n                                                        }\n                                                    }\n                                                });\n                                            }}\n                                        >Add Inner Query</Button>\n                                    </Fragment>\n                                ) : null }\n                            </Fragment>\n                        ) : (\n                            <p>No post meta key detected on your site</p>\n                        ) }\n                    </PanelBody>\n                </InspectorControls>\n            </Fragment>\n        );\n    };\n}, 'withInspectorControl' );\n\nwp.hooks.addFilter(\n    'editor.BlockEdit',\n    'query-block-extension/metadata/filter/add-controls',\n    withInspectorControls\n);"],"names":["TextControl","SelectControl","Button","wp","components","Fragment","element","MetaQueryControl","props","metaKey","metaValue","compare","type","setKey","setValue","setCompare","setType","onDelete","isLast","metaKeys","map","key","label","value","newKey","newCompare","newType","createHigherOrderComponent","compose","useEffect","useState","InspectorControls","blockEditor","PanelBody","ToggleControl","PanelRow","__experimentalHeading","Heading","cloneDeep","addAdditionalAttribute","settings","name","attributes","enableMetaFilter","default","hooks","addFilter","withInspectorControls","BlockEdit","setAttributes","query","setMetaKeys","data","FormData","append","wp_query_block_metadata_filter","nonce","response","fetch","ajaxurl","method","credentials","body","responseJson","json","success","length","remove","rest","metaQuery","relation","innerQueries","newRelation","innerQuery","index","temp","filter","q","qIndex"],"sourceRoot":""}